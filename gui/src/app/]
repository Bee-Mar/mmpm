import { Component, OnInit, Inject } from "@angular/core";
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from "@angular/material/dialog";
//import { FormControl, Validators } from "@angular/forms";
import { ConfirmationDialogComponent } from "src/app/components/confirmation-dialog/confirmation-dialog.component";
import { SelectionModel } from "@angular/cdk/collections";
import { MagicMirrorPackage } from "src/app/interfaces/interfaces";

@Component({
  selector: "app-installation-conflict-resolution-dialog",
  templateUrl: "./installation-conflict-resolution-dialog.component.html",
  styleUrls: ["./installation-conflict-resolution-dialog.component.scss"]
})
export class InstallationConflictResolutionDialogComponent implements OnInit {
  constructor(
    private dialogRef: MatDialogRef<InstallationConflictResolutionDialogComponent>,
    public dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {}

  public selection = new SelectionModel<MagicMirrorPackage>(true, []);
  public disable: Array<boolean>;

  ngOnInit(): void {
    this.disable = new Array<boolean>(this.data?.matchesSelectedTitles?.length);
    this.disable.fill(false);
    this.selection = new SelectionModel<MagicMirrorPackage>(true, []);
  }

  public onCancel(): void {
    if (this.data?.matchesSelectedTitles?.length) {
      const confirmationDialogRef = this.dialog.open(ConfirmationDialogComponent, {
        data: {
          message: "The installation process will be cancelled"
        },
        disableClose: true
      });

      confirmationDialogRef.afterClosed().subscribe((yes) => {
        if (yes) this.dialogRef.close();
      });
    }

    this.dialogRef.close();
  }

  public onSubmit(): void {
    console.log(this.selection.selected);
    const confirmationDialogRef = this.dialog.open(ConfirmationDialogComponent, {
      data: {
        message: "The following will be installed"
      },
      disableClose: true
    });

    confirmationDialogRef.afterClosed().subscribe((yes) => {
      if (yes) this.dialogRef.close();
    });
  }

  public onSelection(pkg: any): void {
    this.selection.toggle(pkg);
    const selectedPackage: MagicMirrorPackage = pkg.value;

    const reset = !this.selection.isSelected(pkg);
    let match: any;

    if (reset) {
      match = (p: MagicMirrorPackage) => p.title === pkg.value.title;
    } else {
      match = (p: MagicMirrorPackage) => p.title === pkg.value.title && p.repository !== pkg.value.repository;
    }

    for (const index in this.data?.matchesSelectedTitles) {
      if (match(this.data?.matchesSelectedTitles[index])) {
        this.disable[index] = reset;
      }
    }
  }
}
